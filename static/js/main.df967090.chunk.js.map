{"version":3,"sources":["components/Data.js","components/Image.js","components/Show.js","App.js","serviceWorker.js","index.js"],"names":["Data","props","react_default","a","createElement","onSubmit","getWeather","type","name","placeholder","className","Image","Show","id","country","city","temperature","visibility","humidity","pressure","error","description","wind","sunrise","sunset","cityId","href","target","API_Key","App","state","longitude","undefined","latitude","time","city_id","_callee","e","api_call","dat","regenerator_default","wrap","_context","prev","next","preventDefault","elements","value","fetch","concat","sent","json","_this","setState","main","temp","sys","Date","toLocaleTimeString","slice","weather","speed","toFixed","stop","this","components_Image","components_Data","components_Show","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.df967090.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Data = props => (\r\n    <form onSubmit={props.getWeather}>\r\n        <input  type='text' name='city' placeholder='Wpisz miasto'/>\r\n\r\n        <input  type='text' name='country' placeholder='Wpisz kraj' />\r\n\r\n        <button className='btn-primary'>Pobierz</button>\r\n    </form>\r\n);  \r\n     \r\nexport default Data;","import React from 'react';\r\n\r\nconst Image = () => (\r\n    <div className='heading-container'>\r\n        <h1 className='title-h1'>Apka pogodowa</h1>\r\n        <h3 className='title-h3'>Sprawdź pogodę w mieście które chcesz odwiedzieć</h3>\r\n    </div>\r\n);\r\n      \r\n     \r\nexport default Image;","import React from 'react';\r\n\r\nconst Show = props => (\r\n    <div id='show-weather'>   \r\n        <div className='weather-container'>\r\n            <div className='lleft'>\r\n            \r\n                {props.country && props.city &&<span> Lokalizacja: {props.city}, {props.country} </span> }\r\n                {props.temperature && <span> Temperatura: {props.temperature} &deg; </span>}\r\n                {props.visibility &&  <span> Widoczność: {props.visibility} km </span>}\r\n                \r\n                {props.humidity &&  <span> Wilgotność: {props.humidity} % </span> }\r\n                {props.pressure &&  <span> Ciśnienie: {props.pressure} Hpa</span>}\r\n                {props.error && <span id='color-span-error'> {props.error}</span>}\r\n            </div>\r\n\r\n            <div className='rright'>\r\n                {props.description && <span> Pogoda: {props.description }</span>}\r\n                {props.wind &&  <span> Wiatr: {props.wind} km/h </span>} \r\n                {props.sunrise && <span> Wschód słonca: {props.sunrise} </span>}\r\n                {props.sunset &&  <span> Zachód słonca:  {props.sunset} </span>}\r\n                {props.cityId &&  <span> ID miasta: {props.cityId} </span> }\r\n                \r\n            \r\n            </div>\r\n        </div>\r\n        \r\n        <div className='cities'>\r\n          <a href='http://bulk.openweathermap.org/sample/' target='_blank'>Lista miast, kliknij by pobrać.</a>\r\n        </div>\r\n        \r\n    </div>\r\n    \r\n);\r\n\r\n\r\n\r\nexport default Show;","import React, { Component } from 'react';\nimport './App.css';\nimport Data from './components/Data'; \nimport Image from './components/Image'; \nimport Show from './components/Show';\n\n\nconst API_Key = 'd40d3e8c0a557b088a740dbc27452f36';\n\n\nclass App extends Component {\n  state = {\n    longitude: undefined,\n    latitude: undefined,\n    time: undefined,\n    city_id: undefined,\n    humidity: undefined,\n    pressure: undefined,\n    temperature: undefined,\n    country: undefined,\n    city: undefined,\n    sunrise: undefined,\n    sunset: undefined,\n    visibility: undefined,\n    description: undefined,\n    wind: undefined,\n    error: undefined,\n\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;  \n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?lang=pl&q=${city},${country}&appid=${\n    API_Key}&units=metric`);\n    const dat = await api_call.json();\n    // console.log(dat.name, dat.main);\n    if(city && country){\n      // console.log(dat);\n      this.setState({\n      \n      city_id: dat.id,\n      humidity: dat.main.humidity,\n      pressure: dat.main.pressure,\n      temperature: dat.main.temp,\n      country: dat.sys.country,\n      city: dat.name,\n      sunrise: (new Date(dat.sys.sunrise*1000).toLocaleTimeString().slice(0,5)),\n      sunset: (new Date(dat.sys.sunset*1000).toLocaleTimeString().slice(0,5)),\n      visibility: dat.visibility/1000,\n      description: dat.weather[0].description,\n      wind: (dat.wind.speed*3.6).toFixed(1),\n      error: ''\n    });\n\n    } else {\n     this.setState({\n      \n      error: 'Uzupełnij puste pola!'\n      });\n    }\n  }\n\n  render() {\n\n    return (\n      <div>\n\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container container-width\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Image />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                  <Data getWeather={this.getWeather} />\n                  <Show  \n                    \n                    cityId={this.state.city_id}\n                    humidity={this.state.humidity}\n                    pressure={this.state.pressure}\n                    temperature={this.state.temperature}\n                    country={this.state.country}\n                    city={this.state.city}\n                    sunrise={this.state.sunrise}\n                    sunset={this.state.sunset}\n                    visibility={this.state.visibility}\n                    description={this.state.description}\n                    wind={this.state.wind}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}